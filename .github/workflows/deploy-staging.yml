name: Deploy to Staging

on:
  push:
    branches:
      - develop
    paths-ignore:
      - '**.md'
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Type of deployment'
        required: true
        type: choice
        options:
          - full
          - frontend-only
          - backend-only
        default: 'full'

concurrency:
  group: staging
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  TERRAFORM_VERSION: "1.5.x"
  NODE_VERSION: "18"
  ENVIRONMENT: staging
  DOCKER_BUILDKIT: "1"
  BUILDX_PLATFORMS: linux/amd64
  HEALTH_CHECK_RETRIES: "5"
  HEALTH_CHECK_INTERVAL: "30"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.environment_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: ${{ env.BUILDX_PLATFORMS }}

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Initialize Terraform
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform init -backend=true \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Apply Terraform Changes
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform workspace select staging || terraform workspace new staging
          terraform apply -auto-approve
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_region: ${{ env.AWS_REGION }}

      - name: Build and Push Backend Image
        if: github.event.inputs.deploy_type == 'full' || github.event.inputs.deploy_type == 'backend-only'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/backend.Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/backend:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/backend:staging-latest
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/backend:staging-latest
          cache-to: type=inline
          platforms: ${{ env.BUILDX_PLATFORMS }}

      - name: Scan Backend Image
        if: github.event.inputs.deploy_type == 'full' || github.event.inputs.deploy_type == 'backend-only'
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/backend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Build and Push Frontend Image
        if: github.event.inputs.deploy_type == 'full' || github.event.inputs.deploy_type == 'frontend-only'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/frontend.Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/frontend:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/frontend:staging-latest
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/frontend:staging-latest
          cache-to: type=inline
          platforms: ${{ env.BUILDX_PLATFORMS }}

      - name: Scan Frontend Image
        if: github.event.inputs.deploy_type == 'full' || github.event.inputs.deploy_type == 'frontend-only'
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/frontend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Deploy Services
        id: deploy
        run: |
          # Update ECS task definitions with new image tags
          aws ecs update-service \
            --cluster ${{ env.ENVIRONMENT }}-cluster \
            --service backend-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          aws ecs update-service \
            --cluster ${{ env.ENVIRONMENT }}-cluster \
            --service frontend-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          # Wait for services to stabilize
          aws ecs wait services-stable \
            --cluster ${{ env.ENVIRONMENT }}-cluster \
            --services backend-service frontend-service

          # Get ALB DNS name for environment URL
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "environment_url=https://${ALB_DNS}" >> $GITHUB_OUTPUT

      - name: Health Check
        run: |
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            if curl -sf "https://${ALB_DNS}/api/health"; then
              exit 0
            fi
            sleep ${{ env.HEALTH_CHECK_INTERVAL }}
          done
          exit 1

      - name: Notify Deployment Status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}