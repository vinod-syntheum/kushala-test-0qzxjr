name: Frontend CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Ensure only one workflow per branch/PR runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.x'
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_STRIPE_PUBLIC_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLIC_KEY }}
  NEXT_PUBLIC_GOOGLE_MAPS_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_KEY }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/web

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: |
            src/web/.next
            src/web/public
          key: ${{ runner.os }}-nextjs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: |
            src/web/.next/**
            src/web/public/**
          retention-days: 7

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/web

    strategy:
      matrix:
        shard: [1, 2, 3, 4] # Parallel test execution

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --coverage --maxWorkers=2 --shard=${{ matrix.shard }}/4
        env:
          CI: true

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.shard }}
          path: src/web/coverage
          retention-days: 14

  e2e:
    name: E2E Tests
    needs: [build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/web

    strategy:
      matrix:
        containers: [1, 2, 3] # Parallel Cypress execution

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: src/web

      - name: Install dependencies
        run: npm ci

      - name: Start application
        run: npm start & npx wait-on http://localhost:3000

      - name: Run Cypress tests
        run: npm run test:e2e -- --parallel --record --group e2e-tests --ci-build-id ${{ github.run_id }} --browser chrome --headless
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: restaurant-platform
          CYPRESS_PARALLEL_TOTAL: 3
          CYPRESS_PARALLEL_INDEX: ${{ matrix.containers }}

      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-artifacts-${{ matrix.containers }}
          path: |
            src/web/cypress/screenshots/**
            src/web/cypress/videos/**
            src/web/cypress/reports/**
          retention-days: 14

  notify:
    name: Notifications
    needs: [build, test, e2e]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          channel: '#frontend-ci'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Frontend CI Pipeline Failed
          to: dev-team@example.com
          from: CI System
          body: The frontend CI pipeline has failed. Please check the logs for more details.