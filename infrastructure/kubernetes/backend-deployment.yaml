apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: restaurant-platform
  labels:
    app: backend
    environment: production
    version: v1
    tier: backend
  annotations:
    kubernetes.io/change-cause: "Initial deployment"
    maintenance-window: "sun:02:00-sun:04:00"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        version: v1
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        checksum/config: "${CONFIG_CHECKSUM}"
        checksum/secrets: "${SECRETS_CHECKSUM}"
    spec:
      # Security Context for enhanced security
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000

      # Topology Spread Constraints for high availability
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: backend

      # Pod Anti-Affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: backend
                topologyKey: kubernetes.io/hostname

      containers:
        - name: backend
          image: restaurant-platform/backend:${VERSION}
          imagePullPolicy: Always
          
          # Container ports
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP

          # Resource requests and limits
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"

          # Liveness probe for container health
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          # Readiness probe for service availability
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3

          # Startup probe for initialization
          startupProbe:
            httpGet:
              path: /startup
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 30

          # Environment variables from ConfigMap and Secrets
          envFrom:
            - configMapRef:
                name: backend-config
            - secretRef:
                name: backend-secrets

          # Volume mounts for persistent data
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: tmp-volume
              mountPath: /tmp

      # Volumes configuration
      volumes:
        - name: config-volume
          configMap:
            name: backend-config
        - name: tmp-volume
          emptyDir: {}

      # Pod termination grace period
      terminationGracePeriodSeconds: 60

      # Image pull secrets if using private registry
      imagePullSecrets:
        - name: registry-credentials