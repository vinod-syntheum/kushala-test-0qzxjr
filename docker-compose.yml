version: "3.9"

services:
  # Frontend service
  frontend:
    build:
      context: ./src/web
      dockerfile: ../infrastructure/docker/frontend.Dockerfile
      target: development
    ports:
      - "3000:3000"
      - "9229:9229"
    volumes:
      - ./src/web:/app
      - /app/node_modules
      - ./src/web/.next:/app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_STRIPE_PUBLIC_KEY
      - NEXT_PUBLIC_GOOGLE_MAPS_KEY
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Backend service
  backend:
    build:
      context: ./src/backend
      dockerfile: ../infrastructure/docker/backend.Dockerfile
      target: development
    ports:
      - "4000:3000"
      - "9230:9229"
    volumes:
      - ./src/backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/digital_presence
      - MONGODB_URI=mongodb://mongo:27017/digital_presence
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET
      - STRIPE_SECRET_KEY
      - GOOGLE_MAPS_API_KEY
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - S3_BUCKET_NAME
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=digital_presence
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # MongoDB database
  mongo:
    image: mongo:6
    environment:
      - MONGO_INITDB_DATABASE=digital_presence
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # NGINX reverse proxy
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./src/web/public:/app/public:ro
      - ./src/web/.next/static:/app/.next/static:ro
    depends_on:
      frontend:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/postgres
      o: bind
  mongo_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/mongo
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ./data/redis
      o: bind

networks:
  app_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: app_network
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16